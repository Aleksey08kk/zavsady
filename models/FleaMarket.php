<?php

namespace app\models;

use Yii;
use yii\db\Expression;

/**
 * This is the model class for table "flea_market".
 *
 * @property int $id
 * @property string|null $name_customer
 * @property string|null $product
 * @property int|null $active
 * @property int|null $allow
 * @property int|null $phone
 * @property int|null $viber
 * @property string|null $photo
 * @property string|null $content
 * @property int|null $date
 * @property string|null $street_and_num
 */
class FleaMarket extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'flea_market';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['active', 'allow', 'date'], 'integer'],
            [['name_customer', 'product', 'photo', 'phone', 'viber', 'content', 'street_and_num'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name_customer' => 'Имя продавца',
            'product' => 'Товар',
            'content' => 'Содержание',
            'active' => 'актив',
            'allow' => 'разрешен',
            'phone' => 'Телефон',
            'viber' => 'Телеграм',
            'photo' => 'Фото',
            'date' => 'Дата',
            'street_and_num' => 'Адрес'
        ];
    }

    /**
 * Удаляет записи старше 30 дней вместе с изображениями
 * @return int количество удаленных записей
 */
public static function deleteRecordsOlderThan30Days()
{
    $deletedCount = 0;
    $thirtyDaysAgo = new Expression('DATE_SUB(NOW(), INTERVAL 30 DAY)');
    
    // Находим записи для удаления
    $records = self::find()
        ->where(['<', 'date', $thirtyDaysAgo])
        ->all();
    
    foreach ($records as $record) {
        // Удаление записи автоматически вызовет beforeDelete()
        if ($record->delete()) {
            $deletedCount++;
        }
    }
    
    return $deletedCount;
}

/**
 * Удаление с обработкой транзакции (опционально)
 * @return int
 */
public static function deleteRecordsOlderThan30DaysWithTransaction()
{
    $transaction = Yii::$app->db->beginTransaction();
    try {
        $count = self::deleteRecordsOlderThan30Days();
        $transaction->commit();
        return $count;
    } catch (\Exception $e) {
        $transaction->rollBack();
        Yii::error("Ошибка при удалении: " . $e->getMessage());
        return 0;
    }
}

    public function saveImage($filename)
    {
        $this->photo = $filename;
        return $this->save(false);
    }

    public function getImageUrl()
    {
        if ($this->photo) {
            return Yii::getAlias('@web/uploads/') . $this->photo;
        }
        return null;
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpLoad();
        $imageUploadModel->deleteCurrentImage($this->photo);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
